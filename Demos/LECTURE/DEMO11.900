"comment" load ESP tape first;
"begin"
        "boolean" open; 
	"comment" open is true for 3600 minutes;
	"integer" truckswaiting;
	"comment" this is a count of the empty trucks waiting;
	"real" u1, u2;
	"boolean" "array" bayfree [1:4];
	"comment" bayfree[i] is true if bay i is free;
	"integer" "array" loadedtrucks [1:4];
	"comment" loadedtrucks[i] is a count of the trucks loaded 
		  by bay i;
        "comment" histogram of delays from arrival to unloading;
	"integer" "array" waiters [-7:10];
	"switch" act:=beginload, truckarrive, finishload,
			shutwarehouse, results;
	"begin" "integer" i;
	"comment" this is the program entry point and this section
		  sets up the initial conditions of the system;
		prepare;
		open:= "true"; truckswaiting:=0;
		"for" i:=1 "step" 1 "until" 4 "do"
		"begin" bayfree[i]:="true";
			loadedtrucks[i]:=0
		"end";
		u1:=setrandom; u2:=setrandom;
		"comment" initializes two random number streams;
		hst set (waiters, 10, 1, 1);
		call(1,10); 
		"comment" the first empty truck arrives in 10 minutes;
		call(3,3600);
		"comment" the warehouse closes in 3600 minutes;
		call(4,4000);
		"comment" output results after 4000 minutes, i.e. when all
			  other activity has ceased;
			  "print" 'initialized'L@@;
		"goto" act[next]
	"end";

truckarrive:
	"begin" 
	"comment" this section simulates the arrival of an empty truck.
		  it also calls itself so that a further truck will
		  arrive in due course. The process stops when 'open' 
		  becomes false;
		checks('arrive'L@@);
		"if" open "then"
		"begin" truckswaiting:=truckswaiting+1;
			call(1,negexp(20,u1));
			"comment" now we simulate the random
				  arrival of an empty truck;
		"end";
		"goto" act[next]
	"end" This completes the setting up of the initial state;

beginload:
	"begin" 
	"comment" this is the set of conditional actions which starts
	          loading a truck whenever a loading bay and empty 
		  truck are available;
		"integer" i, j;
		checks('load'L@@);
		"for" i:=1 "step" 1 "until" 4 "do"
		"if" bayfree[i] "and" truckswaiting "ne" 0 "then"
		"begin" "integer" free; free := 0;
		        bayfree[i]:="false";
			truckswaiting:=truckswaiting-1;
			"comment" keep a histogram of how many trucks waiting;
			hst put(waiters, truckswaiting);
			"comment" the loading bay is busy and we
				  must compute when it becomes free again;
			send[0]:=1;send[1]:=i;
			call(2,random(40,80,u2));
			"comment" we thus make the loading time
				  of random length;
			loadedtrucks[i]:=loadedtrucks[i]+1
			
		"end";
		"goto" act[next]
	"end" the loading thus started will be terminated by the action
	      labelled 'finishload';

finishload:
       checks('finish'L@@);
	bayfree[get[1]]:="true";
	"comment" this action frees the bay after the loading started 
		  in 'beginload' has finished.  They bay's number i is 
		  in get[1] corresponding to the send[1] of the action
		  'beginload';
	"goto" act[next];

shutwarehouse:
        checks('shut'L@@);
	open:="FALSE";
	"comment" this action prevents the arrival of further empty trucks
		  since 'open' is tested by the action 'trucksarrive';
	"goto" act[next];

results:
	"begin" "integer" i, trucks loaded;
	        trucks loaded := 0;
	        punch(3);
		"print" ''L2@Histogram of trucks waiting when a new truck starts loading'L2@@;
	        hst print(waiters, 3);
		"comment" print histogram of free bays when new truck starts loading;
		digits(2);
		"print" ''L2@@;
		"for" i:=1 "step" 1 "until" 4 "do"
		"begin"
		    "print" '    Trucks loaded at bay@, sameline, 
		    	i, ' = @, loadedtrucks[i], ''L@@;
		    trucks loaded := trucks loaded + loaded trucks[i];
		"end";
		"print" ''L@@, digits(4), trucks loaded, sameline, ' trucks loaded in total'L@@;		
		stop
	"end" there will not be any more called events at this stage


"end"

"end"

"end"

<! halt !>